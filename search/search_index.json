{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> \u269c\ufe0f Clientele Loveable API Clients from OpenAPI schemas </p> <p> </p> <p>Clientele lets you generate fully-typed, loveable Python API Clients from OpenAPI schemas:</p> <pre><code>from my_api import client, schemas\n# Pydantic-typed inputs\ndata = schemas.RequestDataRequest(my_input=\"test\")\n# Easy to read client functions\nresponse = client.request_data_request_data_post(data=data)\n# Handle responses elegantly\nmatch response:\ncase schemas.RequestDataResponse():\n# Handle valid response\n...\ncase schemas.ValidationError():\n# Handle validation error\n...\n</code></pre> <p>The generated code is tiny - the example schema we use for documentation and testing only requires 250 lines of code and 5 files.</p> <p>Choose either sync or async - we support both, and you can switch between them easily:</p> <pre><code>from my_async_api import client\n# Async client functions\nresponse = await client.simple_request_simple_request_get()\n</code></pre> <p>All generated from a single command:</p> <pre><code># add -asyncio -t to make it async\nclientele generate -u https://raw.githubusercontent.com/phalt/clientele/main/example_openapi_specs/best.json -o api_client/\n</code></pre> <p>Note</p> <p>That line will generate an example client, why not give it a try now?</p>"},{"location":"#other-features","title":"Other features","text":"<ul> <li>Supports authentication automatically (curently only HTTP Bearer and HTTP Basic auth).</li> <li>Written entirely in Python - no need to install any other languages.</li> <li>The client footprint only requires <code>httpx</code> and <code>pydantic</code>.</li> <li>Support your own configuration - we provide an entry point that will never be overwritten.</li> <li>Designed for easy testing with respx.</li> </ul> <p>We're built on:</p> <ul> <li>Pydantic 2.0</li> <li>httpx</li> <li>openapi-core</li> </ul>"},{"location":"CHANGELOG/","title":"Change log","text":""},{"location":"CHANGELOG/#060","title":"0.6.0","text":"<ul> <li>Significantly improved handling for response schemas. Responses from API endpoints now look at the HTTP status code to pick the correct response schema to generate from the HTTP json data. When regenerating, you will notice a bit more logic generated in the <code>http.py</code> file to handle this.</li> <li>Significantly improved coverage of exceptions raised when trying to generate response schemas.</li> <li>Response types for a class are now sorted.</li> <li>Fixed a bug where <code>put</code> methods did not generate input data correctly.</li> </ul>"},{"location":"CHANGELOG/#052","title":"0.5.2","text":"<ul> <li>Fix pathing for <code>constants.py</code> - thanks to @matthewknight for the contribution!</li> <li>Added <code>CONTRIBUTORS.md</code></li> </ul>"},{"location":"CHANGELOG/#051","title":"0.5.1","text":"<ul> <li>Support for HTTP PUT methods</li> <li>Headers objects use <code>exclude_unset</code> to avoid passing <code>None</code> values as headers, which httpx does not support.</li> </ul> <p>Additionally, an async test client is now included in the test suite. It has identical tests to the standard one but uses the async client instead.</p>"},{"location":"CHANGELOG/#050","title":"0.5.0","text":""},{"location":"CHANGELOG/#please-delete-the-constantspy-file-when-updating-to-this-version-to-have-new-features-take-affect","title":"Please delete the constants.py file when updating to this version to have new features take affect","text":"<ul> <li>Paths are resolved correctly when generating clients in nested directories.</li> <li><code>additional_headers()</code> is now applied to every client, allowing you to set up headers for all requests made by your client.</li> <li>When the client cannot match an HTTP response to a return type for the function it will now raise an <code>http.APIException</code>. This object will have the <code>response</code> attached to it for inspection by the developer.</li> <li><code>MANIFEST</code> is now renamed to <code>MANIFEST.md</code> and will include install information for Clientele, as well as information on the command used to generate the client.</li> </ul>"},{"location":"CHANGELOG/#044","title":"0.4.4","text":"<p>Examples and documentation now includes a very complex example schema built using FastAPI that offers the following variations:</p> <ul> <li>Simple request / response (no input just an output)</li> <li>A request with a URL/Path parameter.</li> <li>Models with <code>int</code>, <code>str</code>, <code>list</code>, <code>dict</code>, references to other models, enums, and <code>list</code>s of other models and enums.</li> <li>A request with query parameters.</li> <li>A response model that has optional parameters.</li> <li>An HTTP POST request that takes an input model.</li> <li>An HTTP POST request that takes path parameters and also an input model.</li> <li>An HTTP GET request that requires an HTTP header, and returns it.</li> <li>An HTTP GET endpoint that returns the HTTP bearer authorization token (also makes clientele generate the http authentication for this schema).</li> </ul> <p>A huge test suite has been added to the CI pipeline for this project using a copy of the generated client from the schema above.</p>"},{"location":"CHANGELOG/#043","title":"0.4.3","text":"<ul> <li><code>Enums</code> now inherit from <code>str</code> as well so that they serialize to JSON properly. See this little nugget.</li> </ul>"},{"location":"CHANGELOG/#042","title":"0.4.2","text":"<ul> <li>Correctly use <code>model_rebuild</code> for complex schemas where there are nested schemas, his may be necessary when one of the annotations is a ForwardRef which could not be resolved during the initial attempt to build the schema.</li> <li>Do not raise for status, instead attempt to return the response if it cannot match a response type.</li> </ul>"},{"location":"CHANGELOG/#041","title":"0.4.1","text":"<ul> <li>Correctly generate lists of nested schema classes</li> <li>Correctly build response schemas that are emphemeral (such as when they just return an array of other schemas, or when they have no $ref).</li> </ul>"},{"location":"CHANGELOG/#040","title":"0.4.0","text":"<ul> <li>Change install suggestion to use pipx as it works best as a global CLI tool.</li> <li>Improved support for OpenAPI 3.0.3 schemas (a test version is available in the example_openapi_specs directory).</li> <li><code>validate</code> command for validating an OpenAPI schema will work with clientele.</li> <li><code>version</code> command for showing the current version of clientele.</li> <li>Supports HTTP DELETE methods.</li> <li>Big refactor of how methods are generated to reduce duplicate code.</li> <li>Support optional header parameters in all request functions (where they are required).</li> <li>Very simple Oauth2 support - if it is discovered will set up HTTP Bearer auth for you.</li> <li>Uses <code>dict</code> and <code>list</code> instead of <code>typing.Dict</code> and <code>typing.List</code> respectively.</li> <li>Improved schema generation when schemas have $ref to other models.</li> </ul>"},{"location":"CHANGELOG/#032","title":"0.3.2","text":"<ul> <li>Minor changes to function name generation to make it more consistent.</li> <li>Optional parameters in schemas are working properly.</li> </ul>"},{"location":"CHANGELOG/#031","title":"0.3.1","text":"<ul> <li>Fixes a bug when generating HTTP Authentication schema.</li> <li>Fixes a bug when generating input classes for post functions, when the input schema doesn't exist yet.</li> <li>Generates pythonic function names in clients now, always (like <code>lower_case_snake_case</code>).</li> </ul>"},{"location":"CHANGELOG/#030","title":"0.3.0","text":"<ul> <li>Now generates a <code>MANIFEST</code> file with information about the build versions</li> <li>Added a <code>constants.py</code> file to the output if one does not exist yet, which can be used to store values that you do not want to change between subsequent re-generations of the clientele client, such as the API base url.</li> <li>Authentication patterns now use <code>constants.py</code> for constants values.</li> <li>Removed <code>ipython</code> from package dependencies and moved to dev dependencies.</li> <li>Documentation! https://phalt.github.io/clientele/</li> </ul>"},{"location":"CHANGELOG/#020","title":"0.2.0","text":"<ul> <li>Improved CLI output</li> <li>Code organisation is now sensible and not just one giant file</li> <li>Now supports an openapi spec generated from a dotnet project (<code>Microsoft.OpenApi.Models</code>)</li> <li>async client support  fully working</li> <li>HTTP Bearer support</li> <li>HTTP Basic support</li> </ul>"},{"location":"CHANGELOG/#010","title":"0.1.0","text":"<ul> <li>Initial version</li> <li>Mostly works with a simple FastAPI generated spec (3.0.2)</li> <li>Works with Twilio's spec (see example_openapi_specs/ directory) (3.0.1)</li> <li>Almost works with stripes</li> </ul>"},{"location":"compatibility/","title":"\ud83d\udcb1 Compatability","text":"<p>When we were building Clientele, we discovered that, despite a fantastic specification, OpenAPI has a lot of poor implementations.</p> <p>As pythonistas, we started with the auto-generated OpenAPI schemas provided by FastAPI, and then we branched out to large APIs like Twilio to test what we built.</p> <p>Despite the effort, we still keep finding subtly different OpenAPI implementations. </p> <p>Because of this we cannot guarentee 100% compatability with an API, but we can give you a good indication of what we've tested.</p>"},{"location":"compatibility/#works-well-with","title":"Works well with","text":"<p>Any bog-standard <code>3.0.x</code> implementation works very well.</p> <ul> <li>FastAPI's OpenAPI schema is very well supported.</li> <li>Microsoft's OpenAPI spec has also been battle tested on an internal project, and works well.</li> </ul>"},{"location":"compatibility/#does-not-work","title":"Does not work","text":"<p>We do not support <code>2.x</code> aka \"Swagger\" - this format is quite different and deprecated.</p>"},{"location":"examples/","title":"\ud83e\ude84 Client example","text":"<p>Let's build an API Client using clientele and an example OpenAPI schema.</p> <p>Our GitHub has a bunch of schemas that are proven to work with clientele, so let's use one of those!</p>"},{"location":"examples/#generate-the-client","title":"Generate the client","text":"<p>Simply:</p> <pre><code>clientele generate -u https://raw.githubusercontent.com/phalt/clientele/main/example_openapi_specs/best.json -o my_client/\n</code></pre> <p>The <code>-u</code> parameter expects a URL, you can provide a path to a file with <code>-f</code> instead if you download the file.</p> <p>The <code>-o</code> parameter is the output directory of the generated client.</p> <p>Run it now and you will see this output:</p> <pre><code>my_client/\n    __init__.py\n    client.py\n    constants.py\n    http.py\n    MANIFEST\n    schemas.py\n</code></pre>"},{"location":"examples/#client","title":"Client","text":"<p>Let's go over each file and talk about what it does</p>"},{"location":"examples/#get-functions","title":"GET functions","text":"<p>The <code>client.py</code> file provides all the API functions from the OpenAPI schema.</p> my_client/client.py<pre><code>import typing  # noqa\nfrom . import schemas  # noqa\nfrom . import http  # noqa\ndef simple_request_simple_request_get() -&gt; schemas.SimpleResponse:\n\"\"\"Simple Request\"\"\"\nresponse = http.get(url=\"/simple-request\")\nreturn http.handle_response(simple_request_simple_request_get, response)\n...\n</code></pre> <p>We can see one of the functions here, <code>simple_request_simple_request_get</code>, is for a straight-forward HTTP GET request without any input arguments, and it returns a schema object.</p> <p>Here is how you might use it:</p> <pre><code>from my_client import client\nclient.simple_request_simple_request_get()\n&gt;&gt;&gt; SimpleResponse(name='Paul')\n</code></pre>"},{"location":"examples/#post-and-put-functions","title":"POST and PUT functions","text":"<p>A more complex example is shown just below. This is for an HTTP POST method, and it requires an input property called <code>data</code> that is an instance of a schema, and returns a union of responses. If the endpoint has url parameters or query parameters, they will appear as input arguments to the function alongside the <code>data</code> argument.</p> <pre><code>def request_data_request_data_post(\ndata: schemas.RequestDataRequest,\n) -&gt; typing.Union[schemas.RequestDataResponse, schemas.HTTPValidationError]:\n\"\"\"Request Data\"\"\"\nresponse = http.post(url=\"/request-data\", data=data.model_dump())\nreturn http.handle_response(request_data_request_data_post, response)\n</code></pre> <p>Here is how you might use it:</p> <pre><code>from my_client import client, schemas\ndata = schemas.RequestDataRequest(my_input=\"Hello, world\")\nresponse = client.request_data_request_data_post(data=data)\n&gt;&gt;&gt; RequestDataResponse(your_input='Hello, world')\n</code></pre> <p>Clientele also supports HTTP PUT functionality in the exact same way as HTTP POST:</p> <pre><code>from my_client import client, schemas\ndata = schemas.RequestDataRequest(my_input=\"Hello, world\")\nresponse = client.request_data_request_data_put(data=data)\n&gt;&gt;&gt; RequestDataResponse(your_input='Hello, world')\n</code></pre>"},{"location":"examples/#url-and-query-parameters","title":"URL and Query parameters","text":"<p>If your endpoint takes path parameters (aka URL parameters) then clientele will turn them into parameters in the function:</p> <pre><code>from my_client import client\nclient.parameter_request_simple_request(your_input=\"gibberish\")\n&gt;&gt;&gt; ParameterResponse(your_input='gibberish')\n</code></pre> <p>Query parameters will also be generated the same way. See this example for a function that takes a required query parameter.</p>"},{"location":"examples/#handling-responses","title":"Handling responses","text":"<p>Because we're using Pydantic to manage the input data, we get a strongly-typed response object. This works beautifully with the new structural pattern matching feature in Python 3.10:</p> <pre><code>response = client.request_data_request_data_post(data=data)\n# Handle responses elegantly\nmatch response:\ncase schemas.RequestDataResponse():\n# Handle valid response\n...\ncase schemas.ValidationError():\n# Handle validation error\n...\n</code></pre>"},{"location":"examples/#api-exceptions","title":"API Exceptions","text":"<p>Clientele works by matching the shape of the response object with the Pydantic return types of a function. When it matches one, it generates the pydantic object and returns it.</p> <p>If the response object is an unintended one, it will not match a return type.</p> <p>In this case, the function will raise an <code>http.APIException</code>.</p> <pre><code>from my_client import client, http\ntry:\ngood_response = my_client.get_my_thing()\nexcept http.APIException as e:\n# The API got a response we didn't expect\nprint(e.response.status_code)\n</code></pre> <p>The <code>response</code> object will be attached to this exception class for later inspection.</p>"},{"location":"examples/#schemas","title":"Schemas","text":"<p>The <code>schemas.py</code> file has all the possible schemas, request and response, and even Enums, for the API.</p> <p>They are all subclassed from pydantic's <code>BaseModel</code>. Here are a few examples:</p> my_client/schemas.py<pre><code>import typing  # noqa\nimport pydantic  # noqa\nfrom enum import Enum  # noqa\nclass ParameterResponse(pydantic.BaseModel):\nyour_input: str\nclass RequestDataRequest(pydantic.BaseModel):\nmy_input: str\nclass RequestDataResponse(pydantic.BaseModel):\nmy_input: str\n# Enums subclass str so they serialize to JSON nicely\nclass ExampleEnum(str, Enum):\nONE = \"ONE\"\nTWO = \"TWO\"\n</code></pre>"},{"location":"examples/#configuration","title":"Configuration","text":"<p>One of the problems with auto-generated clients is that you often need to configure them, and if you try and regenerate the client at some point then your configuration gets wiped clean and you have to do it all over again.</p> <p>Clientele solves this problem by providing an entry point for configuration that will never be overwritten - <code>constants.py</code>.</p> <p>When you first generate the project, you will see a file called <code>constants.py</code> and it will offer configuration functions a bit like this:</p> <pre><code>\"\"\"\nThis file will never be updated on subsequent clientele runs.\nUse it as a space to store configuration and constants.\nDO NOT CHANGE THE FUNCTION NAMES\n\"\"\"\ndef api_base_url() -&gt; str:\n\"\"\"\n    Modify this function to provide the current api_base_url.\n    \"\"\"\nreturn \"http://localhost\"\n</code></pre> <p>Subsequent runs of the <code>generate</code> command will not change this file the first time is made, so you are free to modify the defaults to suit your needs, for example, if you need to source the base url of your API for different configurations, you can modify the <code>api_base_url</code> function like this:</p> <pre><code>from my_project import my_config\ndef api_base_url() -&gt; str:\n\"\"\"\n    Modify this function to provide the current api_base_url.\n    \"\"\"\nif my_config.debug:\nreturn \"http://localhost:8000\"\nelif my_config.production:\nreturn \"http://my-production-url.com\"\n</code></pre> <p>Just keep the function names the same and you're good to go.</p>"},{"location":"examples/#authentication","title":"Authentication","text":"<p>If your OpenAPI spec provides security information for the following authentication methods:</p> <ul> <li>HTTP Bearer</li> <li>HTTP Basic</li> </ul> <p>Then clientele will provide you information on the environment variables you need to set to make this work during the generation. For example:</p> <pre><code>Please see my_client/constants.py to set authentication variables\n</code></pre> <p>The <code>constants.py</code> file will have entry points for you to configure, for example, HTTP Bearer authentication will need the <code>get_bearer_token</code> function to be updated, something like this:</p> <pre><code>def get_bearer_token() -&gt; str:\n\"\"\"\n    HTTP Bearer authentication.\n    Used by many authentication methods - token, jwt, etc.\n    Does not require the \"Bearer\" content, just the key as a string.\n    \"\"\"\nfrom os import environ\nreturn environ.get(\"MY_AUTHENTICATION_TOKEN\")\n</code></pre>"},{"location":"examples/#additional-headers","title":"Additional headers","text":"<p>If you want to pass specific headers with all requests made by the client, you can configure the <code>additional_headers</code> function in <code>constants.py</code> to do this.</p> <pre><code>def additional_headers() -&gt; dict:\n\"\"\"\n    Modify this function ot provide additional headers to all\n    HTTP requests made by this client.\n    \"\"\"\nreturn {}\n</code></pre> <p>Please note that if you are using this with authentication headers, then authentication headers will overwrite these defaults if they keys match.</p>"},{"location":"install/","title":"\ud83c\udfd7\ufe0f Install","text":"<p>We recommend installing with pipx as a global CLI command:</p> <pre><code>pipx install clientele\n</code></pre>"},{"location":"testing/","title":"Testing","text":"<p>Clientele is designed for easy testing, and our own test suite is a great example of how easily you can write mock tests for your API Client.</p> <pre><code>import pytest\nfrom httpx import Response\nfrom respx import MockRouter\nfrom .test_client import client, constants, schemas\nBASE_URL = constants.api_base_url()\n@pytest.mark.respx(base_url=BASE_URL)\ndef test_simple_request_simple_request_get(respx_mock: MockRouter):\n# Given\nmocked_response = {\"status\": \"hello world\"}\nmock_path = \"/simple-request\"\nrespx_mock.get(mock_path).mock(\nreturn_value=Response(json=mocked_response, status_code=200)\n)\n# When\nresponse = client.simple_request_simple_request_get()\n# Then\nassert isinstance(response, schemas.SimpleResponse)\nassert len(respx_mock.calls) == 1\ncall = respx_mock.calls[0]\nassert call.request.url == BASE_URL + mock_path\n</code></pre> <p>We recommend you install respx for writing your tests.</p>"},{"location":"usage/","title":"\ud83d\udcdd Commands","text":""},{"location":"usage/#validate","title":"Validate","text":"<p>Validate lets you check if an OpenAPI schema will work with clientele. Some OpenAPI schema generators do not comply properly with the specification and it is a good way to check if your schema is correct.</p> <pre><code>clientele validate -u http://path.com/to/openapi.json\n</code></pre> <p>Alternatively you can provide a local file:</p> <pre><code>clientele validate -f /path/to/openapi.json\n</code></pre>"},{"location":"usage/#generate","title":"Generate","text":""},{"location":"usage/#from-a-url","title":"From a URL","text":"<p>Assuming the OpenAPI schema is available on the internet somewhere, you can query it to generate your client.</p> <pre><code>clientele generate -u https://raw.githubusercontent.com/phalt/clientele/main/example_openapi_specs/best.json -o my_client/\n</code></pre> <p>Note</p> <p>The example above uses a test OpenAPI format, and will work if you copy/paste it!</p>"},{"location":"usage/#from-a-file","title":"From a file","text":"<p>Alternatively, if you have a local file you can use it to generate your client.</p> <pre><code>clientele generate -f path/to/file.json -o my_client/\n</code></pre>"},{"location":"usage/#async-client","title":"Async Client","text":"<p>If you prefer an asyncio client, just pass <code>--asyncio t</code> to your command.</p> <pre><code>clientele generate -f path/to/file.json -o my_client/ --asyncio t\n</code></pre> <p>Note</p> <p>You can use this command later to swap between a sync and async client so long as the OpenAPI schema remains the same, so don't worry about making a hard decision now.</p>"}]}