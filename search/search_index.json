{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u269c\ufe0f Clientele","text":""},{"location":"#typed-api-clients-from-openapi-specs","title":"Typed API Clients from OpenAPI specs","text":"<p>Clientele lets you generate fully-typed, functional, API Clients from OpenAPI specs.</p> <p>It uses modern tools to be blazing fast and type safe. </p> <p>Plus - there is no complex boilerplate and the generated code is very small.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Fully typed API Client using Pydantic.</li> <li>Minimalist and easy to use - the generated code is designed for readability.</li> <li>Choose either sync or async - we support both, and you can switch between them easily.</li> <li>Supports authentication (curently only HTTP Bearer and HTTP Basic auth).</li> <li>Written entirely in Python - no need to install other languages to use OpenAPI.</li> <li>The client footprint is minimal - it only requires <code>httpx</code> and <code>pydantic</code>.</li> </ul> <p>We're built on:</p> <ul> <li>Pydantic 2.0</li> <li>httpx</li> <li>openapi-core</li> </ul> <p>Ready to go? See the install docs</p>"},{"location":"examples/","title":"\ud83d\udccb Examples","text":""},{"location":"install/","title":"\ud83c\udfd7\ufe0f Install","text":"<p>We recommend using poetry to manage your python packages.</p> <pre><code>poetry add clientele\n</code></pre> <p>We also work with pip</p> <pre><code>pip install clientele\n</code></pre> <p>Ready to use it? See the usage docs</p>"},{"location":"usage/","title":"\ud83d\udcdd Usage","text":"<p>Clientele provides a single command, <code>generate</code>, for generating your API Clients.</p>"},{"location":"usage/#from-a-url","title":"From a URL","text":"<p>Assuming the OpenAPI schema is available on the internet somewhere, you can query it to generate your client.</p> <pre><code>clientele generate -u https://raw.githubusercontent.com/beckett-software/clientele/main/example_openapi_specs/simple.json -o output/\n</code></pre> <p>Note</p> <p>The example above uses a test OpenAPI format, and will work if you copy/paste it!</p>"},{"location":"usage/#from-a-file","title":"From a file","text":"<p>Alternatively, if you have a local file you can use it to generate your client.</p> <pre><code>clientele generate -f path/to/file.json -o output/\n</code></pre>"},{"location":"usage/#async-client","title":"Async Client","text":"<p>If you prefer an asyncio client, just pass <code>--asyncio t</code> to your command.</p> <pre><code>clientele generate -f path/to/file.json -o output/ --asyncio t\n</code></pre> <p>Note</p> <p>You can use this command later to swap between a sync and async client so long as the OpenAPI schema remains the same, so don't worry about making a hard decision now.</p>"},{"location":"usage/#authentication","title":"Authentication","text":"<p>If your OpenAPI spec provides security information for the following authentication methods:</p> <ul> <li>HTTP Bearer</li> <li>HTTP Basic</li> </ul> <p>Then clientele will provide you information on the environment variables you need to set to make this work during the generation. For example:</p> <pre><code>Please see my_client/constants.py to set authentication variables\n</code></pre>"}]}